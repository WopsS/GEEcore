#pragma once

#include <functional>
#include <iterator>
#include <stacktrace>
#include <stdexcept>
#include <string>
#include <system_error>
#include <type_traits>

#include <fmt/format.h>

namespace geecore
{
/**
 * @brief The general exception of this library.
 *
 * @note All exceptions generated by this library inherit from @ref geecore::exception.
 */
class [[nodiscard]] exception : public std::runtime_error
{
public:
    /**
     * @brief Constructs a new exception.
     *
     * @param[in] what_msg                  Explanatory string.
     * @param[in] stacktrace                The stacktrace where the exception occured.
     * @param[in] details_appender_fn       A function that adds extra detail to the exception, e.g. important
     *                                      parameters.
     * @param[in] extra_message_appender_fn A functor that appends extra message(s) to the exception, e.g. Win32 error
     *                                      messages.
     *
     * @throw std::bad_alloc
     */
    exception(
        std::string_view what_msg, std::stacktrace stacktrace = std::stacktrace::current(),
        const std::function<void(std::back_insert_iterator<fmt::memory_buffer>&)>& details_appender_fn = {},
        const std::function<void(std::back_insert_iterator<fmt::memory_buffer>&)>& extra_message_appender_fn = {});

    exception(const exception&) noexcept = default;
    exception& operator=(const exception&) noexcept = default;

    virtual ~exception() noexcept(std::is_nothrow_destructible_v<std::runtime_error>) = default;

private:
    [[nodiscard]] static std::string create_message(
        std::string_view what_msg, std::stacktrace stacktrace,
        const std::function<void(std::back_insert_iterator<fmt::memory_buffer>&)>& details_appender_fn = {},
        const std::function<void(std::back_insert_iterator<fmt::memory_buffer>&)>& extra_message_appender_fn = {});
};
} // namespace geecore
